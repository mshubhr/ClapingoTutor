// Generated by view binder compiler. Do not edit!
package com.example.clapingo.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AutoCompleteTextView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.clapingo.R;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final AutoCompleteTextView autoCompleteTv;

  @NonNull
  public final CardView cardView;

  @NonNull
  public final AppCompatImageView closeButton;

  @NonNull
  public final TextInputLayout inputLayout;

  @NonNull
  public final ImageView likeButton;

  @NonNull
  public final RatingLayoutBinding ratingIncludeLayout;

  @NonNull
  public final RelativeLayout relative;

  @NonNull
  public final RelativeLayout relativeLayout;

  @NonNull
  public final RecyclerView rv;

  @NonNull
  public final TextView teacherDesc;

  @NonNull
  public final ImageView teacherImageView;

  @NonNull
  public final AppCompatTextView teacherNameTextView;

  private ActivityMainBinding(@NonNull LinearLayout rootView,
      @NonNull AutoCompleteTextView autoCompleteTv, @NonNull CardView cardView,
      @NonNull AppCompatImageView closeButton, @NonNull TextInputLayout inputLayout,
      @NonNull ImageView likeButton, @NonNull RatingLayoutBinding ratingIncludeLayout,
      @NonNull RelativeLayout relative, @NonNull RelativeLayout relativeLayout,
      @NonNull RecyclerView rv, @NonNull TextView teacherDesc, @NonNull ImageView teacherImageView,
      @NonNull AppCompatTextView teacherNameTextView) {
    this.rootView = rootView;
    this.autoCompleteTv = autoCompleteTv;
    this.cardView = cardView;
    this.closeButton = closeButton;
    this.inputLayout = inputLayout;
    this.likeButton = likeButton;
    this.ratingIncludeLayout = ratingIncludeLayout;
    this.relative = relative;
    this.relativeLayout = relativeLayout;
    this.rv = rv;
    this.teacherDesc = teacherDesc;
    this.teacherImageView = teacherImageView;
    this.teacherNameTextView = teacherNameTextView;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.auto_complete_tv;
      AutoCompleteTextView autoCompleteTv = ViewBindings.findChildViewById(rootView, id);
      if (autoCompleteTv == null) {
        break missingId;
      }

      id = R.id.cardView;
      CardView cardView = ViewBindings.findChildViewById(rootView, id);
      if (cardView == null) {
        break missingId;
      }

      id = R.id.close_button;
      AppCompatImageView closeButton = ViewBindings.findChildViewById(rootView, id);
      if (closeButton == null) {
        break missingId;
      }

      id = R.id.input_layout;
      TextInputLayout inputLayout = ViewBindings.findChildViewById(rootView, id);
      if (inputLayout == null) {
        break missingId;
      }

      id = R.id.like_button;
      ImageView likeButton = ViewBindings.findChildViewById(rootView, id);
      if (likeButton == null) {
        break missingId;
      }

      id = R.id.rating_include_layout;
      View ratingIncludeLayout = ViewBindings.findChildViewById(rootView, id);
      if (ratingIncludeLayout == null) {
        break missingId;
      }
      RatingLayoutBinding binding_ratingIncludeLayout = RatingLayoutBinding.bind(ratingIncludeLayout);

      id = R.id.relative;
      RelativeLayout relative = ViewBindings.findChildViewById(rootView, id);
      if (relative == null) {
        break missingId;
      }

      id = R.id.relativeLayout;
      RelativeLayout relativeLayout = ViewBindings.findChildViewById(rootView, id);
      if (relativeLayout == null) {
        break missingId;
      }

      id = R.id.rv;
      RecyclerView rv = ViewBindings.findChildViewById(rootView, id);
      if (rv == null) {
        break missingId;
      }

      id = R.id.teacher_desc;
      TextView teacherDesc = ViewBindings.findChildViewById(rootView, id);
      if (teacherDesc == null) {
        break missingId;
      }

      id = R.id.teacher_image_view;
      ImageView teacherImageView = ViewBindings.findChildViewById(rootView, id);
      if (teacherImageView == null) {
        break missingId;
      }

      id = R.id.teacher_name_text_view;
      AppCompatTextView teacherNameTextView = ViewBindings.findChildViewById(rootView, id);
      if (teacherNameTextView == null) {
        break missingId;
      }

      return new ActivityMainBinding((LinearLayout) rootView, autoCompleteTv, cardView, closeButton,
          inputLayout, likeButton, binding_ratingIncludeLayout, relative, relativeLayout, rv,
          teacherDesc, teacherImageView, teacherNameTextView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
